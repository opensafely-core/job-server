# Generated by Django 5.1.6 on 2025-03-24 16:49

import datetime
import re

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.serializers.json
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import jobserver.authorization.fields
import jobserver.models.backend
import jobserver.models.common
import jobserver.models.job
import jobserver.models.job_request
import jobserver.models.org
import jobserver.models.user


class Migration(migrations.Migration):
    replaces = [
        ("jobserver", "0001_squashed_2024_06"),
        ("jobserver", "0004_remove_orgmembership_roles"),
        ("jobserver", "0007_remove_user_is_staff_remove_user_is_superuser"),
        ("jobserver", "0009_alter_user_options"),
        ("jobserver", "0010_remove_user_is_active"),
        ("jobserver", "0011_sitealert"),
        ("jobserver", "0012_remove_publishrequest_report_delete_report"),
    ]

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "username",
                    models.TextField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, unique=True)),
                ("fullname", models.TextField(default="")),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("pat_token", models.TextField(null=True, unique=True)),
                ("pat_expires_at", models.DateTimeField(null=True)),
                ("login_token", models.TextField(null=True)),
                ("login_token_expires_at", models.DateTimeField(null=True)),
                (
                    "roles",
                    jobserver.authorization.fields.RolesArrayField(
                        base_field=jobserver.authorization.fields.RoleField(),
                        default=list,
                        size=None,
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Backend",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("name", models.TextField()),
                ("parent_directory", models.TextField(blank=True, default="")),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Is this backend currently active on the platform?  Connectivity warnings are only shown for active backends.",
                    ),
                ),
                (
                    "auth_token",
                    models.TextField(default=jobserver.models.backend.generate_token),
                ),
                ("level_4_url", models.TextField(blank=True, default="")),
                (
                    "alert_timeout",
                    models.DurationField(default=datetime.timedelta(seconds=300)),
                ),
                ("jobrunner_state", models.JSONField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Org",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, default="")),
                ("logo", models.TextField(blank=True, default="")),
                ("logo_file", models.FileField(null=True, upload_to="org_logos/")),
                (
                    "github_orgs",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        default=jobserver.models.org.default_github_orgs,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_orgs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Organisation",
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField(unique=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("number", models.IntegerField(null=True)),
                ("copilot_support_ends_at", models.DateTimeField(null=True)),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("ongoing", "Ongoing"),
                            ("postponed", "Postponed"),
                            ("retired", "Retired"),
                            ("ongoing-and-linked", "Ongoing - paper/report linked"),
                            ("completed-and-linked", "Completed - paper/report linked"),
                            (
                                "completed-and-awaiting",
                                "Completed - awaiting paper/report",
                            ),
                        ],
                        default="ongoing",
                    ),
                ),
                ("status_description", models.TextField(blank=True, default="")),
                ("copilot_notes", models.TextField(blank=True, default="")),
                ("application_url", models.TextField(default="")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "copilot",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="copiloted_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="projects_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=jobserver.models.common.new_ulid_str,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[
                            ("REQUESTED", "Requested"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="REQUESTED",
                    ),
                ),
                (
                    "requested_files",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder
                    ),
                ),
                ("metadata", models.JSONField(null=True)),
                ("review", models.JSONField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "backend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="releases",
                        to="jobserver.backend",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="releases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReleaseFile",
            fields=[
                (
                    "id",
                    models.CharField(
                        default=jobserver.models.common.new_ulid_str,
                        editable=False,
                        max_length=26,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.TextField()),
                ("path", models.TextField()),
                ("filehash", models.TextField()),
                ("size", models.IntegerField()),
                ("mtime", models.DateTimeField()),
                ("metadata", models.JSONField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("deleted_at", models.DateTimeField(null=True)),
                ("uploaded_at", models.DateTimeField(null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="released_files",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="deleted_files",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "release",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="files",
                        to="jobserver.release",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Repo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("url", models.TextField(unique=True)),
                ("has_github_outputs", models.BooleanField(default=False)),
                ("internal_signed_off_at", models.DateTimeField(null=True)),
                ("researcher_signed_off_at", models.DateTimeField(null=True)),
                (
                    "internal_signed_off_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="internally_signed_off_repos",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "researcher_signed_off_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="repos_signed_off_by_researcher",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Workspace",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.TextField(
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^[-a-zA-Z0-9_]+\\Z"),
                                "Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.",
                                "invalid",
                            )
                        ],
                    ),
                ),
                ("branch", models.TextField()),
                ("is_archived", models.BooleanField(default=False)),
                ("should_notify", models.BooleanField(default=False)),
                ("purpose", models.TextField(default="")),
                ("uses_new_release_flow", models.BooleanField(default=True)),
                ("signed_off_at", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workspaces",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workspaces",
                        to="jobserver.project",
                    ),
                ),
                (
                    "repo",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workspaces",
                        to="jobserver.repo",
                    ),
                ),
                (
                    "signed_off_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workspaces_signed_off",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="workspaces_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Stats",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("api_last_seen", models.DateTimeField(blank=True, null=True)),
                ("url", models.TextField()),
                (
                    "backend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="stats",
                        to="jobserver.backend",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Snapshot",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="snapshots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "files",
                    models.ManyToManyField(
                        related_name="snapshots", to="jobserver.releasefile"
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="snapshots",
                        to="jobserver.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReleaseFileReview",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.TextField(
                        choices=[("APPROVED", "Approved"), ("REJECTED", "Rejected")]
                    ),
                ),
                ("comments", models.JSONField()),
                ("created_at", models.DateTimeField()),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="release_file_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "release_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="jobserver.releasefile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="releasefile",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="files",
                to="jobserver.workspace",
            ),
        ),
        migrations.AddField(
            model_name="release",
            name="workspace",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="releases",
                to="jobserver.workspace",
            ),
        ),
        migrations.CreateModel(
            name="PublishRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("decision_at", models.DateTimeField(null=True)),
                (
                    "decision",
                    models.TextField(
                        choices=[("approved", "Approved"), ("rejected", "Rejected")],
                        null=True,
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="publish_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "decision_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="publish_requests_decisions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "snapshot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="publish_requests",
                        to="jobserver.snapshot",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="snapshot_requests_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="publish_requests",
                        to="jobserver.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProjectMembership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "roles",
                    jobserver.authorization.fields.RolesArrayField(
                        base_field=jobserver.authorization.fields.RoleField(),
                        default=list,
                        size=None,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_project_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="jobserver.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrgMembership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_org_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="jobserver.org",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="org_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="JobRequest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("force_run_dependencies", models.BooleanField(default=False)),
                ("cancelled_actions", models.JSONField(default=list)),
                (
                    "requested_actions",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), size=None
                    ),
                ),
                ("sha", models.TextField()),
                (
                    "identifier",
                    models.TextField(
                        default=jobserver.models.job_request.new_id, unique=True
                    ),
                ),
                ("will_notify", models.BooleanField(default=False)),
                ("project_definition", models.TextField(default="")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "backend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="job_requests",
                        to="jobserver.backend",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workspace",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_requests",
                        to="jobserver.workspace",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.TextField(unique=True)),
                ("action", models.TextField()),
                ("status", models.TextField()),
                ("status_code", models.TextField(blank=True, default="")),
                ("status_message", models.TextField(blank=True, default="")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(null=True)),
                ("started_at", models.DateTimeField(null=True)),
                ("completed_at", models.DateTimeField(null=True)),
                ("trace_context", models.JSONField(null=True)),
                (
                    "job_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="jobs",
                        to="jobserver.jobrequest",
                    ),
                ),
            ],
            options={
                "ordering": ["pk"],
            },
        ),
        migrations.CreateModel(
            name="BackendMembership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "backend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="jobserver.backend",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_backend_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="backend_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="backends",
            field=models.ManyToManyField(
                related_name="members",
                through="jobserver.BackendMembership",
                to="jobserver.backend",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_users",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="orgs",
            field=models.ManyToManyField(
                related_name="members",
                through="jobserver.OrgMembership",
                to="jobserver.org",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="projects",
            field=models.ManyToManyField(
                related_name="members",
                through="jobserver.ProjectMembership",
                to="jobserver.project",
            ),
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_workspace_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("signed_off_at__isnull", True), ("signed_off_by__isnull", True)
                    ),
                    models.Q(
                        ("signed_off_at__isnull", False),
                        ("signed_off_by__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="jobserver_workspace_both_signed_off_at_and_signed_off_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("updated_at__isnull", False), ("updated_by__isnull", False)
                ),
                name="jobserver_workspace_both_updated_at_and_updated_by_set",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="stats",
            unique_together={("backend", "url")},
        ),
        migrations.AddConstraint(
            model_name="snapshot",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_snapshot_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="repo",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("internal_signed_off_at__isnull", True),
                        ("internal_signed_off_by__isnull", True),
                    ),
                    models.Q(
                        ("internal_signed_off_at__isnull", False),
                        ("internal_signed_off_by__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="jobserver_repo_both_internal_signed_off_at_and_internal_signed_off_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="repo",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("researcher_signed_off_at__isnull", True),
                        ("researcher_signed_off_by__isnull", True),
                    ),
                    models.Q(
                        ("researcher_signed_off_at__isnull", False),
                        ("researcher_signed_off_by__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="jobserver_repo_both_researcher_signed_off_at_and_researcher_signed_off_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="releasefilereview",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_releasefilereview_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="releasefile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_releasefile_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="releasefile",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("deleted_at__isnull", True), ("deleted_by__isnull", True)
                    ),
                    models.Q(
                        ("deleted_at__isnull", False), ("deleted_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_releasefile_both_deleted_at_and_deleted_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="release",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_release_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="publishrequest",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_publishrequest_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="publishrequest",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("decision__isnull", True),
                        ("decision_at__isnull", True),
                        ("decision_by__isnull", True),
                    ),
                    models.Q(
                        ("decision__isnull", False),
                        ("decision_at__isnull", False),
                        ("decision_by__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="jobserver_publishrequest_both_decision_at_decision_by_and_decision_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="publishrequest",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("updated_at__isnull", True), ("updated_by__isnull", True)
                    ),
                    models.Q(
                        ("updated_at__isnull", False), ("updated_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_publishrequest_both_updated_at_and_updated_by_set",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectmembership",
            unique_together={("project", "user")},
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.UniqueConstraint(
                condition=models.Q(("number__isnull", False)),
                fields=("number",),
                name="unique_number_ignore_null",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="orgmembership",
            unique_together={("org", "user")},
        ),
        migrations.AddConstraint(
            model_name="jobrequest",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_at__isnull", True), ("created_by__isnull", True)
                    ),
                    models.Q(
                        ("created_at__isnull", False), ("created_by__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_jobrequest_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="backendmembership",
            unique_together={("backend", "user")},
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("pat_expires_at__isnull", True), ("pat_token__isnull", True)
                    ),
                    models.Q(
                        ("pat_expires_at__isnull", False), ("pat_token__isnull", False)
                    ),
                    _connector="OR",
                ),
                name="jobserver_user_both_pat_expires_at_and_pat_token_set",
            ),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.CheckConstraint(
                condition=models.Q(("slug", ""), _negated=True),
                name="slug_is_not_empty",
            ),
        ),
        migrations.AlterField(
            model_name="workspace",
            name="name",
            field=models.TextField(unique=True),
        ),
        migrations.AddConstraint(
            model_name="workspace",
            constraint=models.CheckConstraint(
                condition=models.Q(("name__regex", "^[-a-zA-Z0-9_]+\\Z")),
                name="name_is_valid",
            ),
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("objects", jobserver.models.user.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name="jobrequest",
            name="codelists_ok",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="job",
            name="run_command",
            field=models.TextField(default=""),
        ),
        migrations.AddField(
            model_name="job",
            name="metrics",
            field=models.JSONField(null=True),
        ),
        migrations.CreateModel(
            name="ProjectCollaboration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_lead", models.BooleanField(default=False)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="project_orgs",
                        to="jobserver.org",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="project_orgs",
                        to="jobserver.project",
                    ),
                ),
            ],
            options={
                "unique_together": {("org", "project")},
            },
        ),
        migrations.AddField(
            model_name="project",
            name="orgs",
            field=models.ManyToManyField(
                related_name="projects",
                through="jobserver.ProjectCollaboration",
                to="jobserver.org",
            ),
        ),
        migrations.AddConstraint(
            model_name="projectcollaboration",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_lead", True)),
                fields=("project",),
                name="jobserver_projectcollaboration_only_one_lead_org_set",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_projects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("created_at__isnull", False), ("created_by__isnull", False)
                ),
                name="jobserver_project_both_created_at_and_created_by_set",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="projects_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name="project",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("updated_at__isnull", False), ("updated_by__isnull", False)
                ),
                name="jobserver_project_both_updated_at_and_updated_by_set",
            ),
        ),
        migrations.AlterField(
            model_name="projectcollaboration",
            name="org",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="collaborations",
                to="jobserver.org",
            ),
        ),
        migrations.AlterField(
            model_name="projectcollaboration",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="collaborations",
                to="jobserver.project",
            ),
        ),
        migrations.AddField(
            model_name="projectcollaboration",
            name="created_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="projectcollaboration",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="created_project_collaborations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="projectcollaboration",
            name="updated_at",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="projectcollaboration",
            name="updated_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="updated_project_collaborations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="AuditableEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("old", models.TextField()),
                ("new", models.TextField()),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("project_member_added", "User added"),
                            ("project_member_removed", "User removed"),
                            ("project_member_updated_roles", "User's roles updated"),
                        ]
                    ),
                ),
                ("target_model", models.TextField()),
                ("target_field", models.TextField()),
                ("target_id", models.TextField()),
                ("target_user", models.TextField()),
                ("parent_model", models.TextField()),
                ("parent_id", models.TextField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("created_by", models.TextField()),
            ],
        ),
        migrations.AlterField(
            model_name="workspace",
            name="repo",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="workspaces",
                to="jobserver.repo",
            ),
        ),
        migrations.AlterModelManagers(
            name="jobrequest",
            managers=[
                ("objects", jobserver.models.job_request.JobRequestManager()),
            ],
        ),
        migrations.AlterModelManagers(
            name="job",
            managers=[
                ("objects", jobserver.models.job.JobManager()),
            ],
        ),
        migrations.AlterModelOptions(
            name="user",
            options={
                "ordering": [
                    models.Case(
                        models.When(fullname="", then=1),
                        default=0,
                        output_field=models.IntegerField(),
                    ),
                    django.db.models.functions.text.Lower("fullname"),
                    django.db.models.functions.text.Lower("username"),
                ]
            },
        ),
        migrations.CreateModel(
            name="SiteAlert",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.TextField(
                        blank=True,
                        help_text="Summary of the reason for the alert, to display in the title of the alert (optional)",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="The message to display in the alert (required)"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("danger", "Danger"),
                            ("info", "Info"),
                            ("success", "Success"),
                            ("warning", "Warning"),
                        ],
                        default="warning",
                        help_text="How significant the alert is, for UI styling.",
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_alerts_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="site_alerts_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
