"""
Django settings for jobserver project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import re
from pathlib import Path

import dj_database_url
from csp.constants import NONCE, NONE, SELF, UNSAFE_INLINE
from django.contrib.messages import constants as messages
from django.urls import reverse_lazy

from services.logging import logging_config_dict
from services.sentry import initialise_sentry


_missing_env_var_hint = """\
If you are running commands locally outside of `just` then you should
make sure that your `.env` file is being loaded into the environment,
which you can do in Bash using:

    set -a; source .env; set +a

If you are seeing this error when running via `just` (which should
automatically load variables from `.env`) then you should check that
`.env` contains all the variables listed in `dotenv-sample` (which may
have been updated since `.env` was first created).

If you are seeing this error in production then you haven't configured
things properly.
"""


def get_env_var(name):
    try:
        return os.environ[name]
    except KeyError:
        raise RuntimeError(
            f"Missing environment variable: {name}\n\n{_missing_env_var_hint}"
        )


# Build paths inside the project like this: BASE_DIR / ...
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var("SECRET_KEY")

# Optional fallback for rotating the secret key.
# Any OLD_SECRET_KEY that is added should then be removed
# after the time in SESSION_COOKIE_AGE elapses.
# Refer to INSTALL.md for guidance.
OLD_SECRET_KEY = os.environ.get("OLD_SECRET_KEY", default=None)
if OLD_SECRET_KEY is not None:
    SECRET_KEY_FALLBACKS = [OLD_SECRET_KEY]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", default=False) == "True"

DEBUG_TOOLBAR = os.environ.get("DJANGO_DEBUG_TOOLBAR", default=False) == "True"

BASE_URL = os.environ.get("BASE_URL", default="http://localhost:8000")

ALLOWED_HOSTS = ["*"]


# Application definition
INSTALLED_APPS = [
    "airlock",
    "applications",
    "jobserver",
    "redirects",
    "staff",
    "anymail",
    "django_extensions",
    "django_htmx",
    "django_vite",
    "slippers",
    "csp",
    "rest_framework",
    "social_django",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
]

MIDDLEWARE = [
    "redirects.middleware.RedirectsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django_permissions_policy.PermissionsPolicyMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_structlog.middlewares.RequestMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "csp.middleware.CSPMiddleware",
    "jobserver.middleware.XSSFilteringMiddleware",
    "jobserver.middleware.ClientAddressIdentification",
    "jobserver.middleware.TemplateNameMiddleware",
]

if DEBUG_TOOLBAR:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = "jobserver.urls"

# if adding to the list of context processors in TEMPLATES, update the
# corresponding lists in the fixtures to disable and enable the
# db_maintenance_mode() context processor in tests/conftest.py
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
                "jobserver.context_processors.in_production",
                "jobserver.context_processors.can_view_staff_area",
                "jobserver.context_processors.nav",
                "jobserver.context_processors.site_alerts",
                "jobserver.context_processors.disable_creating_jobs",
                "jobserver.context_processors.login_url",
                "jobserver.context_processors.db_maintenance_mode",
            ],
            "builtins": ["slippers.templatetags.slippers"],
        },
    },
]

WSGI_APPLICATION = "jobserver.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.parse(
        os.environ.get("DATABASE_URL", default="sqlite:///db.sqlite3")
    ),
}

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.AutoField"


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/ref/contrib/staticfiles/#module-django.contrib.staticfiles
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

# https://docs.djangoproject.com/en/4.2/howto/static-files/
# Note: these *must* be strings. If they are paths, we cannot cleanly extract them in ./scripts/collect-me-maybe.sh
BUILT_ASSETS = Path(
    os.environ.get("BUILT_ASSETS", default=BASE_DIR / "assets" / "dist")
)
STATICFILES_DIRS = [
    str(BASE_DIR / "static"),
    str(BUILT_ASSETS),
]
STATIC_ROOT = Path(os.environ.get("STATIC_ROOT", default=BASE_DIR / "staticfiles"))
STATIC_URL = "/static/"

ASSETS_DEV_MODE = os.environ.get("ASSETS_DEV_MODE", default=False) == "True"

DJANGO_VITE = {
    "default": {
        "dev_mode": ASSETS_DEV_MODE,
        "manifest_path": BUILT_ASSETS / ".vite" / "manifest.json",
    }
}

# Vite generates files with 8 hash digits
# http://whitenoise.evans.io/en/stable/django.html#WHITENOISE_IMMUTABLE_FILE_TEST


def immutable_file_test(path, url):
    # Match filename with 12 hex digits before the extension
    # e.g. app.db8f2edc0c8a.js
    return re.match(r"^.+[\.\-][0-9a-f]{8,12}\..+$", url)


WHITENOISE_IMMUTABLE_FILE_TEST = immutable_file_test


# User uploaded files
# https://docs.djangoproject.com/en/4.0/topics/files/
MEDIA_ROOT = Path(os.environ.get("MEDIA_STORAGE", default="uploads"))
MEDIA_URL = "/uploads/"


# Form submission
# https://docs.djangoproject.com/en/5.1/ref/settings/#data-upload-max-number-fields
DATA_UPLOAD_MAX_NUMBER_FIELDS = 2000


# Logging
# https://docs.djangoproject.com/en/3.1/topics/logging/
LOGGING = logging_config_dict


# Auth
AUTHENTICATION_BACKENDS = [
    "social_core.backends.github.GithubOAuth2",
    "django.contrib.auth.backends.ModelBackend",
]
AUTH_USER_MODEL = "jobserver.User"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
LOGIN_ERROR_URL = "/"
LOGIN_URL = reverse_lazy("login")
LOGIN_URL_TIMEOUT_MINUTES = 60
SOCIAL_AUTH_GITHUB_KEY = get_env_var("SOCIAL_AUTH_GITHUB_KEY")
SOCIAL_AUTH_GITHUB_SECRET = get_env_var("SOCIAL_AUTH_GITHUB_SECRET")
SOCIAL_AUTH_GITHUB_SCOPE = ["user:email"]
RAP_API_BASE_URL = os.environ.get("RAP_API_BASE_URL", default="")
RAP_API_TOKEN = os.environ.get("RAP_API_TOKEN", default="")


# Passwords
# https://docs.djangoproject.com/en/4.0/ref/settings/#password-hashers
PASSWORD_HASHERS = (
    [
        hasher.strip()
        for hasher in os.environ.get("PASSWORD_HASHERS").split(",")
        if hasher.strip()
    ]
    if os.environ.get("PASSWORD_HASHERS")
    else ["django.contrib.auth.hashers.Argon2PasswordHasher"]
)


# Messages
# https://docs.djangoproject.com/en/3.0/ref/contrib/messages/
MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}


# Checks
# https://docs.djangoproject.com/en/3.2/topics/checks/
SILENCED_SYSTEM_CHECKS = [
    "security.W004",  # (SECURE_HSTS_SECONDS) TLS is handled by Nginx
    "security.W008",  # (SECURE_SSL_REDIRECT) HTTPS redirection is handled by CloudFlare
    "security.W019",  # (X_FRAME_OPTIONS) Set to SAMEORIGIN to allow iframe elements in the outputs viewer
]

# Security
# https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-CSRF_COOKIE_SECURE
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SECURE = not DEBUG
CSRF_TRUSTED_ORIGINS = [BASE_URL]

# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options#directives
X_FRAME_OPTIONS = "SAMEORIGIN"


# CSP
# https://django-csp.readthedocs.io/en/latest/configuration.html
CONNECT_SRC = [
    SELF,
    "https://plausible.io",
    "https://sentry.io",
    "https://*.ingest.sentry.io/",
]
FONT_SRC = [SELF, "data:"]
SCRIPT_SRC = [SELF, "https://plausible.io", NONCE]
STYLE_SRC = [SELF]

# configure django-csp to work with Vite when using it in dev mode
if ASSETS_DEV_MODE:
    CONNECT_SRC = SCRIPT_SRC + ["ws://localhost:5173/static/"]
    FONT_SRC = FONT_SRC + ["http://localhost:5173"]
    SCRIPT_SRC = SCRIPT_SRC + ["http://localhost:5173"]
    STYLE_SRC = STYLE_SRC + [UNSAFE_INLINE]

CONTENT_SECURITY_POLICY = {
    "EXCLUDE_URL_PREFIXES": ["/api"],
    "DIRECTIVES": {
        "report-uri": os.environ.get("CSP_REPORT_URI", default=""),
        "connect-src": CONNECT_SRC,
        "default-src": [NONE],
        "font-src": FONT_SRC,
        "img-src": [
            SELF,
            "blob:",
            "data: w3.org/svg/2000",
            "https://github.com",
            "https://avatars.githubusercontent.com",
        ],
        "manifest-src": [SELF],
        "script-src": SCRIPT_SRC,
        "style-src": STYLE_SRC,
        # Duplicate the *_ELEM settings for Firefox
        # https://bugzilla.mozilla.org/show_bug.cgi?id=1529338
        "script-src-elem": SCRIPT_SRC,
        "style-src-elem": STYLE_SRC,
    },
}


# CSRF error view
# https://docs.djangoproject.com/en/4.1/ref/settings/#csrf-failure-view
CSRF_FAILURE_VIEW = "jobserver.views.errors.csrf_failure"


# Globally set django.forms.URLField.assume_scheme to "https"
# This can be removed in the 6.0 release
# https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-FORMS_URLFIELD_ASSUME_HTTPS
FORMS_URLFIELD_ASSUME_HTTPS = True


# THIRD PARTY SETTINGS

# Anymail
ANYMAIL = {
    "MAILGUN_API_KEY": os.environ.get("MAILGUN_API_KEY", default=None),
    "MAILGUN_API_URL": "https://api.eu.mailgun.net/v3",
    "MAILGUN_SENDER_DOMAIN": "mg.jobs.opensafely.org",
}
EMAIL_BACKEND = os.environ.get(
    "EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend"
)
DEFAULT_FROM_EMAIL = "you@example.com"
SERVER_EMAIL = "your-server@example.com"

# REST Framework
# https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "jobserver.api.authentication.NoAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
}

# Debug Toolbar
# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#configuring-internal-ips
INTERNAL_IPS = [
    "127.0.0.1",
]

# Permissions Policy
PERMISSIONS_POLICY = {
    "interest-cohort": [],
    # The following disables Google's Topics. For more information, see:
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/browsing-topics
    "browsing-topics": [],
}

# Python/Django Social Auth
SOCIAL_AUTH_PIPELINE = [
    "jobserver.auth_pipeline.pipeline",
]

SOCIAL_AUTH_ACTIVE_USERS_FILTER = {}

# Sentry
initialise_sentry()


# PROJECT SETTINGS
DISABLE_CREATING_JOBS = os.environ.get("DISABLE_CREATING_JOBS", default=False) == "True"

# Released files per-file size limit
RELEASE_FILE_SIZE_LIMIT = int(
    os.environ.get(
        "RELEASE_FILE_SIZE_LIMIT",
        default=16 * 1024 * 1024,  # 16Mb
    )
)

# Released files storage location
# Note: we deliberately don't use MEDIA_ROOT/MEDIA_URL here, to avoid any
# surprises with django's default uploads implementation.
RELEASE_STORAGE = Path(os.environ.get("RELEASE_STORAGE", default="releases"))

# IP prefix of docker subnet on dokku 4
TRUSTED_PROXIES = (
    [
        proxy.strip()
        for proxy in os.environ.get("TRUSTED_PROXIES").split(",")
        if proxy.strip()
    ]
    if os.environ.get("TRUSTED_PROXIES")
    else ["172.17.0."]
)

# Map client IP addresses to backend slugs
BACKEND_IP_MAP = {
    "62.253.26.158": "tpp",
    # uncomment to pretend your browser is on tpp
    # "127.0.0.1": "tpp",
}


# SLACK CHANNELS
RELEASES_SLACK_CHANNEL = os.environ.get(
    "RELEASES_SLACK_CHANNEL", default="opensafely-releases"
)
REGISTRATIONS_SLACK_CHANNEL = os.environ.get(
    "REGISTRATIONS_SLACK_CHANNEL", default="job-server-registrations"
)
APPLICATIONS_SLACK_CHANNEL = os.environ.get(
    "RELEASES_SLACK_CHANNEL", default="job-server-applications"
)
COPILOT_SUPPORT_SLACK_CHANNEL = os.environ.get(
    "COPILOT_SUPPORT_SLACK_CHANNEL", default="co-pilot-support"
)
# for Airlock
DEFAULT_OUTPUT_CHECKING_SLACK_CHANNEL = os.environ.get(
    "DEFAULT_OUTPUT_CHECKING_SLACK_CHANNEL", default="opensafely-outputs"
)

# OUTPUT_CHECKING_REPOS
DEFAULT_OUTPUT_CHECKING_GITHUB_ORG = os.environ.get(
    "DEFAULT_OUTPUT_CHECKING_GITHUB_ORG", default="ebmdatalab"
)
DEFAULT_OUTPUT_CHECKING_REPO = os.environ.get(
    "DEFAULT_OUTPUT_CHECKING_REPO", default="opensafely-output-review"
)
DEFAULT_MAX_GITHUB_RETRIES = int(
    os.environ.get("DEFAULT_MAX_GITHUB_RETRIES", default=3)
)

# These orgs are not copiloted
BENNETT_ORG_PK = 3
GRAPHNET_ORG_PK = 12
LSHTM_ORG_PK = 4
UNIVERSITY_OF_BRISTOL_ORG_PK = 9

# How long in seconds to wait between calls to the RAP API status endpoint to
# fetch job updates
RAP_API_POLL_INTERVAL = int(os.environ.get("RAP_API_POLL_INTERVAL", default=60))
