# Load .env files by default
set dotenv-load := true

export DEV_USERID := `id -u`
export DEV_GROUPID := `id -g`

# an alias to allow us to use this recipe from the justfile in the parent directory
_dotenv:
    {{ just_executable() }} --justfile {{ justfile_directory() }}/../justfile _dotenv


build env="dev": _dotenv
    #!/usr/bin/env bash
    test -z "${SKIP_BUILD:-}" || { echo "SKIP_BUILD set"; exit 0; }

    # set build args for prod builds
    export BUILD_DATE=$(date -u +'%y-%m-%dT%H:%M:%SZ')
    export GITREF=$(git rev-parse --short HEAD)
    export NODE_VERSION=$(cat ../.node-version)

    # build the thing
    docker compose build --pull {{ env }}


# run tests in dev container
test *pytest_args="": _dotenv build
    #!/bin/bash
    # Note, we do *not* run coverage in docker, as we want to use xdist, and coverage does not seem to work reliably.
    docker compose run --rm test pytest -m "not verification" {{ pytest_args }}

# run as service in dev|prod container
serve env="dev" *args="": _dotenv (build env)
    {{ just_executable() }} build {{ env }}
    docker compose up {{ args }} {{ env }}


# run command in dev|prod container, runserver by default
run env="dev" *args="": (build env)
    docker compose run --service-ports --rm {{ env }} {{ args }}


# exec command in existing dev|prod container
exec env="dev" *args="bash": (build env)
    docker compose exec {{ env }} {{ args }}


# run a basic functional smoke test against a running job-server
smoke-test host="http://localhost:8000": _dotenv
    #!/bin/bash
    set -eu
    curl -I {{ host }} -s --compressed --fail --retry 20 --retry-delay 1 --retry-all-errors


# manually run the docker db. Useful if you want to use it but with venv based dev env
db: build
    docker compose up -d db

# if the database container exists and is running, stop it from running
stop-db:
    #!/bin/bash
    set -eu
    container_id=`docker ps -q --filter label=com.docker.compose.project=$COMPOSE_PROJECT_NAME --filter label=com.docker.compose.service=db --filter status=running`
    if [ -n "$container_id" ]; then
    	docker compose -p $COMPOSE_PROJECT_NAME stop db >/dev/null
    fi

# stop and remove all job-server containers
clean:
    #!/bin/bash
    set -eux
    . .env
    docker compose down
    docker container prune --force --filter label=com.docker.compose.project=$COMPOSE_PROJECT_NAME

# remove all state
clean-volumes: clean
    #!/bin/bash
    set -eux
    rm -rf staticfiles/*
    docker volume rm -f job-server_postgres_data


# restore the db from a dump file. Will wipe and reset your current docker dev db.
restore-db dump="jobserver.dump": clean-volumes  db
    #!/bin/bash
    set -eux
    path=$(realpath ../{{ dump }})
    docker compose run -v "$path:/tmp/jobserver.dump" --entrypoint bash --rm dev -c "pg_restore --clean --if-exists --no-acl --no-owner -d \$DATABASE_URL /tmp/jobserver.dump"
